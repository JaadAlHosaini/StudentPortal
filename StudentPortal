package com.deaniemqri.studentportal;

import java.io.*;
import java.util.*;

public class StudentPortal {

    private static final String USER_FILE_NAME = "src/UserData.txt";
    private static final String SUBJECT_FILE_NAME = "src/AcademicSubjects.txt";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Load data
        List<User> users = DataStorage.loadUsers();
        Map<String, String> subjectMapping = loadSubjectMapping();
        Map<String, String> coCurricularMapping = loadCoCurricularMapping();

        UserAuth auth = new UserAuth(users);

        while (true) {
            System.out.println("\n1. Register");
            System.out.println("2. Login");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                auth.registerUser(scanner);
                DataStorage.saveUsers(users);
            } else if (choice == 2) {
                User loggedInUser = auth.loginUser(scanner);
                if (loggedInUser != null) {
                    showStudentMenu(loggedInUser, scanner, subjectMapping, coCurricularMapping);
                }
            } else if (choice == 3) {
                System.out.println("Exiting...");
                break;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }

    private static void showStudentMenu(User user, Scanner scanner, Map<String, String> subjectMapping, Map<String, String> coCurricularMapping) {
        while (true) {
            System.out.println("\nLogin successful!");
            System.out.println("Welcome " + user.getStudentEmail());
            System.out.println("1. Display academic subjects");
            System.out.println("2. Display co-curricular activities");
            System.out.println("3. Generate Transcript");
            System.out.println("0. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                displayAcademicSubjects(user, subjectMapping);
            } else if (choice == 2) {
                displayCoCurricularActivities(user, coCurricularMapping);
            } else if (choice == 0) {
                System.out.println("Exiting...");
                break;
            } else if (choice == 3){
                CocurriculumMarksCalculator(user,scanner);
                
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayAcademicSubjects(User user, Map<String, String> subjectMapping) {
        System.out.println("Academic Subjects you are enrolled in:");
        List<String> subjectCodes = user.getAcademicSubjects();
        if (subjectCodes.isEmpty()) {
            System.out.println("No academic subjects enrolled.");
        } else {
            List<Map.Entry<String, String>> subjectsWithNames = new ArrayList<>();
            for (String subjectCode : subjectCodes) {
                String subjectName = subjectMapping.get(subjectCode);
                if (subjectName != null) {
                    subjectsWithNames.add(new AbstractMap.SimpleEntry<>(subjectCode, subjectName));
                } else {
                    System.out.println(subjectCode + ", Subject not found");
                }
            }

            subjectsWithNames.sort(Map.Entry.comparingByValue());

            for (Map.Entry<String, String> entry : subjectsWithNames) {
                System.out.println(entry.getKey() + ", " + entry.getValue());
            }
        }
    }

    private static Map<String, String> loadSubjectMapping() {
        Map<String, String> subjectMapping = new HashMap<>();
        File file = new File(SUBJECT_FILE_NAME);

        if (!file.exists()) {
            saveDefaultSubjects(file);
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 2) {
                    subjectMapping.put(parts[0].trim(), parts[1].trim());
                }
            }
        } catch (FileNotFoundException e) {
            System.err.println("Subjects file not found: " + file.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("Error reading subjects file: " + e.getMessage());
        }

        return subjectMapping;
    }

    private static void saveDefaultSubjects(File file) {
        String[] defaultSubjects = {
            "1103,Malay Language",
            "1119,English Language",
            "1223,Islamic Education",
            "1225,Moral Education",
            "1249,History",
            "1449,Mathematics",
            "1511,Science",
            "3472,Additional Mathematics",
            "3754,Entrepreneurial Studies",
            "3766,Business",
            "3756,Principles of Accounting",
            "3767,Economics",
            "4531,Physics",
            "4541,Chemistry",
            "4551,Biology",
            "6531,Chinese Language"
        };

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (String subject : defaultSubjects) {
                writer.write(subject);
                writer.newLine();
            }
            System.out.println("Default subjects saved to " + file.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("Error saving default subjects: " + e.getMessage());
        }
    }

    private static void displayCoCurricularActivities(User user, Map<String, String> coCurricularMapping) {
        System.out.println("Co-Curricular Activities you are enrolled in:");
        List<String> activityCodes = user.getCoCurricularClubs();

        if (activityCodes.isEmpty()) {
            System.out.println("No co-curricular activities enrolled.");
            return;
        }

        List<Map.Entry<String, String>> activitiesWithNames = new ArrayList<>();
        for (String activityCode : activityCodes) {
            String activityName = coCurricularMapping.get(activityCode);
            if (activityName != null) {
                activitiesWithNames.add(new AbstractMap.SimpleEntry<>(activityCode, activityName));
            } else {
                System.out.println(activityCode + " - Activity not found.");
            }
        }

        activitiesWithNames.sort(Map.Entry.comparingByValue());

        for (Map.Entry<String, String> entry : activitiesWithNames) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }
    }

    private static Map<String, String> loadCoCurricularMapping() {
        Map<String, String> coCurricularMapping = new HashMap<>();
        File file = new File("CoCurricularActivities.txt");

        if (!file.exists()) {
            saveDefaultCoCurricularActivities(file);
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",", 2);
                if (parts.length == 2) {
                    coCurricularMapping.put(parts[0].trim(), parts[1].trim());
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading co-curricular activities file: " + e.getMessage());
        }

        return coCurricularMapping;
    }

    private static void saveDefaultCoCurricularActivities(File file) {
        String[] defaultActivities = {
            "B01,Scout",
            "B03,Police Cadet",
            "B07,The Boysâ€™ Brigade",
            "P27,Computer Society",
            "P81,Young Entrepreneur Society",
            "P82,Robotic Club",
            "S01,Badminton Club",
            "S10,Swimming Club",
            "S15,Fencing Club",            
        };

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (String activity : defaultActivities) {
                writer.write(activity);
                writer.newLine();
            }
            System.out.println("Default co-curricular activities saved to " + file.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("Error saving default co-curricular activities: " + e.getMessage());
        }
    }

    private static void displayAvailableSubjects(Map<String, String> subjectMapping) {
        System.out.println("Available Academic Subjects:");
        System.out.println("Code : Subject Name");
        System.out.println("=".repeat(30));
        subjectMapping.forEach((code, name) -> System.out.println(code + " : " + name));
        System.out.println();
    }
    private static void CocurriculumMarksCalculator(User user, Scanner scanner) {
    try {
        // File writers
        BufferedWriter positionWriter = new BufferedWriter(new FileWriter("StudentPositions.txt", true));
        BufferedWriter activityWriter = new BufferedWriter(new FileWriter("ActivitiesLog.txt", true));

        // Prompt for positions
        System.out.println("Enter your positions and achievements:");
        System.out.print("Matric Number: ");
        String matricNumber = user.getMatricNumber();
        System.out.println(matricNumber);

        System.out.print("Society Code and Position: ");
        String societyPosition = scanner.nextLine();

        System.out.print("Uniform Body Code and Position: ");
        String uniformPosition = scanner.nextLine();

        System.out.print("Sports Club Code and Position: ");
        String sportsPosition = scanner.nextLine();

        // Save positions to file
        positionWriter.write(matricNumber + "," + societyPosition + "," + uniformPosition + "," + sportsPosition);
        positionWriter.newLine();
        positionWriter.close();

        // Prompt for activities
        System.out.println("\nEnter your activities and achievements:");

        System.out.print("Society Code, Activity Involved, Level, and Achievement (separate with ','): ");
        String societyActivity = scanner.nextLine();

        System.out.print("Uniform Body Code, Activity Involved, Level, and Achievement (separate with ','): ");
        String uniformActivity = scanner.nextLine();

        System.out.print("Sports Club Code, Activity Involved, Level, and Achievement (separate with ','): ");
        String sportsActivity = scanner.nextLine();

        // Save activities to file
        if (!societyActivity.isBlank()) {
            activityWriter.write(matricNumber + "," + societyActivity);
            activityWriter.newLine();
        }
        if (!uniformActivity.isBlank()) {
            activityWriter.write(matricNumber + "," + uniformActivity);
            activityWriter.newLine();
        }
        if (!sportsActivity.isBlank()) {
            activityWriter.write(matricNumber + "," + sportsActivity);
            activityWriter.newLine();
        }

        activityWriter.close();

        // Calculate marks
        calculateMarks(matricNumber);

    } catch (IOException e) {
        System.err.println("Error writing to file: " + e.getMessage());
    }
}

private static void calculateMarks(String matricNumber) {
    try {
        BufferedReader positionReader = new BufferedReader(new FileReader("StudentPositions.txt"));
        BufferedReader activityReader = new BufferedReader(new FileReader("ActivitiesLog.txt"));

        String positionLine;
        String activityLine;
        int totalMarks = 0;
        int highestMark = 0;
        int secondHighestMark = 0;

        System.out.println("\nTranscript for student " + matricNumber);
        System.out.println("Co-curriculum Transcript for " + matricNumber);
        System.out.println("=".repeat(72));

        while ((positionLine = positionReader.readLine()) != null) {
            String[] positionData = positionLine.split(",");
            if (positionData[0].equals(matricNumber)) {
                for (int i = 1; i < positionData.length; i++) {
                    String clubPosition = positionData[i];
                    int positionMarks = getPositionMarks(clubPosition);

                    String clubCode = clubPosition.split(" ")[0];
                    String activityDetails = null;
                    while ((activityLine = activityReader.readLine()) != null) {
                        if (activityLine.startsWith(matricNumber + "," + clubCode)) {
                            activityDetails = activityLine;
                            break;
                        }
                    }

                    int attendanceMarks = 50;
                    int levelMarks = 0;
                    int achievementMarks = 0;
                    String activityName = "None";
                    String activityLevel = "None";
                    String activityAchievement = "None";

                    if (activityDetails != null) {
                        String[] activityData = activityDetails.split(",");
                        activityName = activityData[2];
                        activityLevel = activityData[3];
                        activityAchievement = activityData[4];

                        levelMarks = getLevelMarks(activityLevel);
                        achievementMarks = getAchievementMarks(activityAchievement);
                    }

                    int clubTotal = attendanceMarks + positionMarks + levelMarks + achievementMarks;
                    totalMarks += clubTotal;

                    if (clubTotal > highestMark) {
                        secondHighestMark = highestMark;
                        highestMark = clubTotal;
                    } else if (clubTotal > secondHighestMark) {
                        secondHighestMark = clubTotal;
                    }

                    System.out.printf("[%s]\n", clubCode);
                    System.out.printf("Attendance: assume full ------------> %d/50 marks\n", attendanceMarks);
                    System.out.printf("Position: %-25s ------------> %2d/10 marks\n", positionData[i], positionMarks);
                    System.out.printf("Selected Activity: %s\n", activityName);
                    System.out.printf("Level of Activities: %-15s ------> %2d/20 marks\n", activityLevel, levelMarks);
                    System.out.printf("Achievement Level: %-15s ------------> %2d/20 marks\n", activityAchievement, achievementMarks);
                    System.out.println("=".repeat(72));
                }
            }
        }

        double finalMark = (highestMark + secondHighestMark) / 2.0;
        System.out.printf("FINAL MARKS: %.1f marks\n", finalMark);

        positionReader.close();
        activityReader.close();
    } catch (IOException e) {
        System.err.println("Error reading file: " + e.getMessage());
    }
}

private static int getPositionMarks(String position) {
    return switch (position) {
        case "President" -> 10;
        case "Vice President", "Secretary", "Treasurer" -> 9;
        case "Vice Secretary", "Vice Treasurer" -> 8;
        case "Committee" -> 7;
        case "Active Member" -> 6;
        default -> 0;
    };
}

private static int getLevelMarks(String level) {
    return switch (level) {
        case "International" -> 20;
        case "National" -> 15;
        case "State" -> 12;
        case "School" -> 10;
        default -> 0;
    };
}

private static int getAchievementMarks(String achievement) {
    return switch (achievement) {
        case "Gold" -> 20;
        case "Silver" -> 19;
        case "Bronze" -> 18;
        case "Participation" -> 0;
        default -> 0;
    };
}
}



class User {
    private String studentEmail;
    private String matricNumber;
    private String password;
    private List<String> academicSubjects;
    private List<String> coCurricularClubs;

    public User(String studentEmail, String matricNumber, String password,
                List<String> academicSubjects, List<String> coCurricularClubs) {
        this.studentEmail = studentEmail;
        this.matricNumber = matricNumber;
        this.password = password;
        this.academicSubjects = academicSubjects;
        this.coCurricularClubs = coCurricularClubs;
    }

    public String getStudentEmail() {
        return studentEmail;
    }

    public String getMatricNumber() {
        return matricNumber;
    }

    public String getPassword() {
        return password;
    }

    public List<String> getAcademicSubjects() {
        return academicSubjects;
    }

    public List<String> getCoCurricularClubs() {
        return coCurricularClubs;
    }

    @Override
    public String toString() {
        return studentEmail + "\n" + matricNumber + "\n" + password + "\n" +
                String.join(", ", academicSubjects) + "\n" +
                String.join(", ", coCurricularClubs) + "\n";
    }
}

class UserAuth {
    private List<User> users;

    public UserAuth(List<User> users) {
        this.users = users;
    }

    public void registerUser(Scanner scanner) {
        System.out.print("Enter student email: ");
        String email = scanner.nextLine();
        System.out.print("Enter matric number: ");
        String matricNumber = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        System.out.print("Enter academic subjects (separate with semicolons): ");
        List<String> subjects = List.of(scanner.nextLine().split(";"));

        System.out.print("Enter co-curricular clubs (separate with semicolons): ");
        List<String> clubs = List.of(scanner.nextLine().split(";"));

        User newUser = new User(email, matricNumber, password, subjects, clubs);
        users.add(newUser);
        System.out.println("Registration successful!");
    }

    public User loginUser(Scanner scanner) {
        System.out.print("Enter email: ");
        String email = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        for (User user : users) {
            if (user.getStudentEmail().equals(email) && user.getPassword().equals(password)) {
                System.out.println("Login successful!");
                return user;
            }
        }
        System.out.println("Invalid email or password.");
        return null;
    }
}

class DataStorage {
    public static List<User> loadUsers() {
        List<User> users = new ArrayList<>();
        File file = new File("UserData.txt");

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String email;
            while ((email = br.readLine()) != null) {
                String matricNumber = br.readLine();
                String password = br.readLine();
                String subjectsLine = br.readLine();
                String clubsLine = br.readLine();

                if (matricNumber == null || password == null || subjectsLine == null || clubsLine == null) {
                    System.err.println("Error: Malformed or incomplete user data. Skipping...");
                    break;
                }

                String[] subjects = subjectsLine.split(", ");
                String[] clubs = clubsLine.split(", ");

                List<String> academicSubjects = List.of(subjects);
                List<String> coCurricularClubs = List.of(clubs);
                users.add(new User(email, matricNumber, password, academicSubjects, coCurricularClubs));

                br.readLine();
            }
        } catch (FileNotFoundException e) {
            System.err.println("User data file not found: " + file.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("Error loading user data: " + e.getMessage());
        }

        return users;
    }

    public static void saveUsers(List<User> users) {
        File file = new File("UserData.txt");

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (User user : users) {
                bw.write(user.toString());
                bw.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error saving users: " + e.getMessage());
        }
    }
}
